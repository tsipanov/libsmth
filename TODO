//
Aggiungere una _t alla fine del nome dei tipi.
i flag sono gia` in little-endian

inserire un while, con SPECIAL all'interno del corpo principale (che risparmiamo anche spazio....)

Il sdtp e` nella sezione sbagliata
Muovere l'azzeramento dell'armatura all'inizio, o metterla dinamica (sostituire se ce ne sono 2)

alla linea 381

mettere dei while al posto dei due FOR...

fprintf(stderr, "size: 0x%04lx (0x%04lx)\n", root->tsize, root->bsize); //DEBUG

controllare che i flag in parseencr funzionino a dovere

#if 0
FIXME preparare il parser dei flag
/* used by TRUN and TFHD */

/** ExtendedSampleFlags (4 bytes): A comprehensive Sample flags field. */
/** non ci mascheriamo na cippa perche` possono essere anche nulli e avere senso */
ExtendedSampleFlags =
6*6 RESERVED_BIT
SampleDependsOn (2 bits): Specifies whether this Sample depends on another Sample.
	SampleDependsOn =   SampleDependsOnUnknown = %b0 %b0/
						SampleDependsOnOthers  = %b0 %b1/
						SampleDoesNotDependsOnOthers = %b1 %b0
SampleIsDependedOn (2 bits): Specifies whether other Samples depend on this Sample.
	SampleIsDependedOn =	SampleIsDependedOnUnknown = %b0 %b0/
							SampleIsNotDisposable = %b0 %b1/
							SampleIsDisposable = %b1 %b0
SampleHasRedundancy (2 bits): Specifies whether this Sample uses redundant coding.
	SampleHasRedundancy =   RedundantCodingUnknown = %b0 %b0/
							RedundantCoding = %b0 %b1/
							NoRedundantCoding = %b1 %b0
SamplePaddingValue (3 bits): The Sample padding value, as specified in [ISOFF].
	SamplePaddingValue = 3*3 BIT
SampleIsDifferenceValue (1 bit): Specifies whether the Sample is a difference between two states.
	SampleIsDifferenceValue = BIT

SampleDegradationPriority (2 bytes): The Sample degradation priority, as specified in [ISOFF].
	SampleDegradationPriority = UNSIGNED_INT16
================================================================================
SampleDependsOnUnknown (2 bits): Unknown whether this Sample depends on other Samples.
SampleDependsOnOthers (2 bits): This Sample depends on other Samples.
SampleDoesNotDependOnOthers (2 bits): This Sample does not depend on other Samples.

SampleIsDependedOnUnknown (2 bits): Unknown whether other Samples depend on this Sample.
SampleIsNotDisposable (2 bits): Other Samples depend on this Sample.
SampleIsDisposable (2 bits): No other Samples depend on this Sample.

RedundantCodingUnknown (2 bits): Unknown whether this Sample uses redundant coding.
RedundantCoding (2 bits): This Sample uses redundant coding.
NoRedundantCoding (2 bits): This Sample does not use redundant coding.








SampleFlags (1 byte): A compact Sample flags field useful to choose Samples to discard.

2*2 RESERVED_BIT
SampleDependsOn (2 bits): Specifies whether this Sample depends on another Sample.
	SampleDependsOn =   SampleDependsOnUnknown = %b0 %b0/
						SampleDependsOnOthers  = %b0 %b1/
						SampleDoesNotDependsOnOthers = %b1 %b0
SampleIsDependedOn (2 bits): Specifies whether other Samples depend on this Sample.
	SampleIsDependedOn =	SampleIsDependedOnUnknown = %b0 %b0/
							SampleIsNotDisposable = %b0 %b1/
							SampleIsDisposable = %b1 %b0
SampleHasRedundancy (2 bits): Specifies whether this Sample uses redundant coding.
	SampleHasRedundancy =   RedundantCodingUnknown = %b0 %b0/
							RedundantCoding = %b0 %b1/
							NoRedundantCoding = %b1 %b0

RESERVED_UNSIGNED_INT64 = %x00 %x00 %x00 %x00 %x00 %x00 %x00 %x00
RESERVED_UNSIGNED_INT32 = %x00 %x00 %x00 %x00
RESERVED_UNSIGNED_INT16 = %x00 %x00
RESERVED_BYTE			= %x00
RESERVED_BIT			= %b0
#endif

